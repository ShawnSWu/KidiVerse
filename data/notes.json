[
  {
    "title": "blockchain.md",
    "path": "content\\notes\\blockchain.md",
    "modified": "2025-06-11T20:39:31.3560839+08:00",
    "content": "---\ntitle: \"區塊鏈技術基礎\"\ntags: [\"blockchain\", \"crypto\", \"web3\", \"technology\"]\ncategories: [\"Tech\", \"Finance\"]\ndate: 2025-06-07\n---\n\n# 區塊鏈技術基礎\n\n區塊鏈是一種分散式資料儲存技術，它通過密碼學原理確保數據安全並創建不可篡改的交易記錄。\n\n## 核心特點\n\n- **去中心化**: 無需中央機構驗證交易\n- **不可篡改**: 一旦數據寫入區塊鏈，幾乎不可能更改\n- **透明性**: 所有交易對網絡參與者可見\n- **安全性**: 使用密碼學確保數據安全\n\n## 應用領域\n\n1. 加密貨幣（如比特幣、以太坊）\n2. 智能合約\n3. 供應鏈追蹤\n4. 身份驗證\n5. 去中心化金融(DeFi)\n\n區塊鏈技術的應用遠不止於加密貨幣。在現代企業中，區塊鏈可以應用於許多需要高度透明和不可篡改性的場景。\n\n與[[容器技術]]不同，區塊鏈關注的是數據的不可篡改性和分散式存儲。\n",
    "summary": "# 區塊鏈技術基礎 區塊鏈是一種分散式資料儲存技術，它通過密碼學原理確保數據安全並創建不可篡改的交易記錄。 ## 核心特點 - **去中心化**: 無需中央機構驗證交易 - **不可篡改**: 一旦數據寫入區塊鏈，幾乎不可能更改 - **透明性**: 所有交易對網絡參與者可見 - **安全性**: 使用密碼學確保數據安全 ## 應用領域 1. 加密貨幣（如比特幣、以太坊） 2. 智能合約 3. 供應鏈追蹤 4. 身份驗證 5. 去中心化金融(DeFi) 區塊鏈技術的應用遠不止於加密貨幣。在現代企業中，區塊鏈可以應用於許多需要高度透明和不可篡改性的場景。...",
    "wordCount": 45,
    "tags": [
      "blockchain",
      "crypto",
      "web3",
      "technology"
    ],
    "categories": [
      "Tech",
      "Finance"
    ],
    "references": [
      "容器技術"
    ],
    "relativeUrl": "/notes\\blockchain/"
  },
  {
    "title": "docker-compose.md",
    "path": "content\\notes\\docker-compose.md",
    "modified": "2025-06-11T20:39:07.2707306+08:00",
    "content": "---\ntitle: \"使用Docker Compose\"\ntags: [\"docker\", \"docker-compose\", \"container\", \"devops\"]\ncategories: [\"Tech\"]\ndate: 2025-06-10\n---\n\n# 使用Docker Compose\n\nDocker Compose 是一個用於定義和運行多容器 Docker 應用的工具。通過 Compose，您可以使用 YAML 文件來配置應用的服務。\n\n## 主要優點\n\n- **單一命令管理應用生命週期**: `docker-compose up -d`, `docker-compose down`\n- **保持環境一致**: 確保所有人使用相同的環境配置\n- **簡化開發工作流程**: 將複雜的多容器配置簡化為單一文件\n\n## 簡單範例\n\n```yaml\nversion: '3'\n\nservices:\n  webapp:\n    image: nginx:latest\n    ports:\n      - \"80:80\"\n    volumes:\n      - ./html:/usr/share/nginx/html\n  \n  database:\n    image: mysql:5.7\n    environment:\n      MYSQL_ROOT_PASSWORD: rootpassword\n      MYSQL_DATABASE: myapp\n    volumes:\n      - db-data:/var/lib/mysql\n\nvolumes:\n  db-data:\n```\n\n這個簡單的配置文件建立了一個包含網頁伺服器和資料庫的應用環境。\n\n對於更複雜的部署需求，可以考慮[[Kubernetes]]。但對於大部分開發和小型部署，Docker Compose 結合[[Docker 基本概念]]已經足夠使用。\n",
    "summary": "# 使用Docker Compose Docker Compose 是一個用於定義和運行多容器 Docker 應用的工具。通過 Compose，您可以使用 YAML 文件來配置應用的服務。 ## 主要優點 - **單一命令管理應用生命週期**: `docker-compose up -d`, `docker-compose down` - **保持環境一致**: 確保所有人使用相同的環境配置 - **簡化開發工作流程**: 將複雜的多容器配置簡化為單一文件 ## 簡單範例 ```yaml version:...",
    "wordCount": 74,
    "tags": [
      "docker",
      "docker-compose",
      "container",
      "devops"
    ],
    "categories": [
      "Tech"
    ],
    "references": [
      "Kubernetes",
      "Docker 基本概念"
    ],
    "relativeUrl": "/notes\\docker-compose/"
  },
  {
    "title": "kubernetes.md",
    "path": "content\\notes\\kubernetes.md",
    "modified": "2025-06-11T20:38:41.4145397+08:00",
    "content": "---\ntitle: \"Kubernetes 容器編排系統\"\ntags: [\"kubernetes\", \"container\", \"devops\", \"cloud-native\"]\ncategories: [\"Tech\"]\ndate: 2025-06-08\n---\n\n# Kubernetes 容器編排系統\n\nKubernetes (K8s) 是一個開源的容器編排系統，用於自動化部署、擴展和管理容器化應用程序。\n\n## 核心功能\n\n- **自動部署與擴展**: 根據需求自動調整容器數量\n- **負載均衡**: 分發網絡流量以確保部署穩定\n- **自我修復**: 重啟失敗容器，替換無響應容器\n- **服務發現**: 自動為容器分配IP和DNS名稱\n\n## 基本架構\n\nKubernetes 集群由一組工作節點 (Node) 和控制平面 (Control Plane) 組成。控制平面負責全局決策和檢測/響應集群事件。\n\n相比[[Docker]]單機容器管理，Kubernetes 提供了更完整的集群管理功能。對於學習路徑，建議先掌握[[Docker 基本概念]]，再學習 Kubernetes。\n",
    "summary": "# Kubernetes 容器編排系統 Kubernetes (K8s) 是一個開源的容器編排系統，用於自動化部署、擴展和管理容器化應用程序。 ## 核心功能 - **自動部署與擴展**: 根據需求自動調整容器數量 - **負載均衡**: 分發網絡流量以確保部署穩定 - **自我修復**: 重啟失敗容器，替換無響應容器 - **服務發現**: 自動為容器分配IP和DNS名稱 ## 基本架構 Kubernetes 集群由一組工作節點 (Node) 和控制平面 (Control Plane) 組成。控制平面負責全局決策和檢測/響應集群事件。 相比[[Docker]]單機容器管理，Kubernetes...",
    "wordCount": 47,
    "tags": [
      "kubernetes",
      "container",
      "devops",
      "cloud-native"
    ],
    "categories": [
      "Tech"
    ],
    "references": [
      "Docker",
      "Docker 基本概念"
    ],
    "relativeUrl": "/notes\\kubernetes/"
  },
  {
    "title": "docker-basics.md",
    "path": "content\\notes\\docker-basics.md",
    "modified": "2025-06-11T20:38:07.6945066+08:00",
    "content": "---\ntitle: \"Docker 基本概念\"\ntags: [\"docker\", \"container\", \"devops\"]\ncategories: [\"Tech\"]\ndate: 2025-06-09\n---\n\n# Docker 基本概念\n\nDocker 是一個開源的應用容器引擎，讓開發者可以打包他們的應用以及依賴包到一個可移植的容器中。\n\n## 核心概念\n\n- **容器（Container）**: 獨立運行的一個或一組應用\n- **鏡像（Image）**: 用於創建容器的模板\n- **倉庫（Repository）**: 集中存放鏡像文件的場所\n\n## 常用命令\n\n```bash\n# 啟動一個容器\ndocker run -d -p 80:80 nginx\n\n# 列出所有容器\ndocker ps -a\n\n# 停止容器\ndocker stop \u003ccontainer_id\u003e\n```\n\n這裡可以[[使用Docker Compose]]來管理多容器應用，或者參考[[Kubernetes]]進行更大規模的容器編排。\n",
    "summary": "# Docker 基本概念 Docker 是一個開源的應用容器引擎，讓開發者可以打包他們的應用以及依賴包到一個可移植的容器中。 ## 核心概念 - **容器（Container）**: 獨立運行的一個或一組應用 - **鏡像（Image）**: 用於創建容器的模板 - **倉庫（Repository）**: 集中存放鏡像文件的場所 ## 常用命令 ```bash # 啟動一個容器 docker run -d -p 80:80 nginx # 列出所有容器 docker...",
    "wordCount": 53,
    "tags": [
      "docker",
      "container",
      "devops"
    ],
    "categories": [
      "Tech"
    ],
    "references": [
      "使用Docker Compose",
      "Kubernetes"
    ],
    "relativeUrl": "/notes\\docker-basics/"
  },
  {
    "title": "about.md",
    "path": "content\\about.md",
    "modified": "2025-06-11T00:39:56.8636364+08:00",
    "content": "---\ntitle: \"About KidiVerse\"\nlayout: \"about\"\n---\n",
    "summary": "",
    "wordCount": 7,
    "tags": null,
    "categories": null,
    "references": null,
    "relativeUrl": "/about/"
  },
  {
    "title": "k8s.md",
    "path": "content\\container\\kubernetes\\k8s.md",
    "modified": "2025-06-11T00:27:24.4353086+08:00",
    "content": "# Kubernetes \n\nWelcome to the **Kubernetes** documentation — your *ultimate guide* to deploying, scaling, and managing containerized applications.\n\n---\n\n## Table of Contents\n\n1. [Overview](#overview)\n2. [Core Components](#core-components)\n3. [Useful Commands](#useful-commands)\n4. [Cluster Setup](#cluster-setup)\n5. [Links and Resources](#links-and-resources)\n6. [Tasks](#tasks)\n7. [Footnotes](#footnotes)\n\n---\n\n## Overview\n\n\u003e Kubernetes (commonly referred to as **K8s**) is an open-source system for automating deployment, scaling, and management of containerized applications.\n\nKubernetes was initially designed by Google[^1] and is now maintained by the [CNCF](https://www.cncf.io).\n\nHere is a logo:\n\n![Kubernetes Logo](https://upload.wikimedia.org/wikipedia/commons/3/39/Kubernetes_logo_without_workmark.svg)\n\nUse `kubectl version` to check the version of your Kubernetes CLI.\n\n---\n\n## Core Components\n\n| Component      | Description                       |\n| -------------- | --------------------------------- |\n| kube-apiserver | Handles all REST requests         |\n| etcd           | Key-value store for configuration |\n| kube-scheduler | Assigns pods to nodes             |\n| kubelet        | Manages pods on a worker node     |\n| controller     | Controller                        |\n~~kube-up.sh~~ has been deprecated in favor of kubeadm.\n\nSome components are optional but useful:\n\n* *Dashboard UI*\n* **Helm** for package management\n* ~~Heapster~~ (deprecated)\n\n---\n\n### Controller\n\n![[controller.gif]]\n\n## Useful Commands\n\n### Code Block\n\n```bash\nkubectl get pods -A\nkubectl describe node\n```\n\n### Inline Code\n\nUse `kubectl get svc` to list services.\n\n### HTML Key Bindings\n\nTo exit a watch command, press \u003ckbd\u003eCtrl\u003c/kbd\u003e + \u003ckbd\u003eC\u003c/kbd\u003e.\n\n---\n\n## Cluster Setup\n\n1. Install **Minikube** or **Kind**\n2. Start the Kubernetes cluster\n3. Deploy your first pod\n4. Validate with `kubectl get pods`\n\nNested tasks:\n\n* Setup kubeconfig\n\n  * Copy config to `~/.kube/config`\n  * Use `kubectl config use-context`\n\n---\n\n## Links and Resources\n\n* [Kubernetes Official Docs](https://kubernetes.io/docs)\n* [CNCF Projects](https://www.cncf.io/projects/)\n\n### Image\n\n![[master_node.png]]\n\n---\n\n## Tasks\n\n* [x] Install kubectl\n* [x] Create a namespace\n* [ ] Deploy a sample app\n* [ ] Configure Ingress rules\n\n---",
    "summary": "# Kubernetes Welcome to the **Kubernetes** documentation — your *ultimate guide* to deploying, scaling, and managing containerized applications. --- ## Table of Contents 1. [Overview](#overview) 2. [Core Components](#core-components) 3. [Useful...",
    "wordCount": 296,
    "tags": null,
    "categories": null,
    "references": [
      "controller.gif",
      "master_node.png"
    ],
    "relativeUrl": "/container\\kubernetes\\k8s/"
  },
  {
    "title": "Docker.md",
    "path": "content\\container\\Docker.md",
    "modified": "2025-06-10T00:34:35.8925603+08:00",
    "content": "# Docker Comprehensive Guide\n\nWelcome to this **comprehensive** guide about **Docker** — the containerization platform that is revolutionizing software development and deployment.\n\n---\n\n## Table of Contents\n\n1. [Introduction](#introduction)\n2. [What is Docker?](#what-is-docker)\n3. [Key Concepts](#key-concepts)\n4. [Docker Installation](#docker-installation)\n5. [Basic Docker Commands](#basic-docker-commands)\n6. [Dockerfile Explained](#dockerfile-explained)\n7. [Docker Compose](#docker-compose)\n8. [Advanced Topics](#advanced-topics)\n9. [Resources](#resources)\n\n---\n\n### Introduction\n\nDocker enables developers to package applications into containers—standardized executable components combining application source code with the operating system libraries and dependencies required to run that code in any environment.\n\n---\n\n#### What is Docker?\n\n\u003e Docker is an open platform for developing, shipping, and running applications.\n\n- Allows **containerization** of applications.\n- Supports **microservices architecture**.\n- Provides **portability** and **consistency** across environments.\n\n---\n\n##### Key Concepts\n\n| Concept     | Description                                                                 |\n|-------------|-----------------------------------------------------------------------------|\n| Container   | Lightweight, standalone, executable package of software                     |\n| Image       | Read-only template used to create containers                                |\n| Dockerfile  | Text file with instructions to build a Docker image                         |\n| Registry    | Repository to store and distribute Docker images (e.g., Docker Hub)         |\n| Volume      | Persistent storage independent of container lifecycle                       |\n\n---\n\n###### Docker Installation\n\n```bash\n# On Ubuntu\nsudo apt update\nsudo apt install docker.io\n\n# On Mac \u0026 Windows\n# Download from https://www.docker.com/products/docker-desktop\n\n\nDocker Compose\nDocker Compose allows you to define and run multi-container Docker applications.\n\nExample docker-compose.yml:\n\n```yaml\nversion: '3'\nservices:\n  web:\n    image: nginx:latest\n    ports:\n      - \"80:80\"\n  db:\n    image: mysql:5.7\n    environment:\n      - MYSQL_ROOT_PASSWORD=secret\n```",
    "summary": "# Docker Comprehensive Guide Welcome to this **comprehensive** guide about **Docker** — the containerization platform that is revolutionizing software development and deployment. --- ## Table of Contents 1. [Introduction](#introduction) 2....",
    "wordCount": 242,
    "tags": null,
    "categories": null,
    "references": null,
    "relativeUrl": "/container\\Docker/"
  },
  {
    "title": "git-basics.md",
    "path": "content\\Git\\git-basics.md",
    "modified": "2025-06-09T01:49:11.0451459+08:00",
    "content": "## 📄 3. `git-basics.md`\r\n\r\n```markdown\r\n# 🧬 Git Basics Guide\r\n\r\nGit is a distributed version control system that helps you track changes in source code.\r\n\r\n---\r\n\r\n## ✍️ Getting Started\r\n\r\n```bash\r\ngit init\r\ngit config --global user.name \"Shawn Wu\"\r\ngit config --global user.email \"shawn@example.com\"\r\n",
    "summary": "## 📄 3. `git-basics.md` ```markdown # 🧬 Git Basics Guide Git is a distributed version control system that helps you track changes in source code. --- ## ✍️ Getting Started...",
    "wordCount": 44,
    "tags": null,
    "categories": null,
    "references": null,
    "relativeUrl": "/Git\\git-basics/"
  }
]